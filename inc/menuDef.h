

#define OnlyDrawColor _BIT7
#define OnlyDrawCode _BIT6

typedef enum
{
	CP_GrayColor,
	CP_BlackColor,
	CP_SeaBlueColor,
	CP_YellowColor,

	CP_GreenColor,
	CP_WhiteColor,
	CP_PinkColor1,
	CP_RedColor,

	CP_WhiteColor1,
	CP_BlueColor,
	CP_WhiteColor2,
	CP_WhiteColor3,

	CP_TransparenceColor,
	CP_WhiteColor4,
	CP_PinkColor,
	CP_GreenColor1,
	CP_MaxColor
} CP_ColorType;

typedef enum
{
	// PowerOffMenu, // 0
	// PowerOnMenu, // 1
	RootMenu, // 6
	ShowSourceMenu,// 10
	PictureMenu, // 13

	// user definition from here

	// ShowSourceMenu,// 10
	// FunctionMenu,// 15
	// SystemMenu,// 16

	// FactoryRootMenu,

	// user definition end
	MaxMenu
} MenuPageIndexType;



typedef enum
{
	MIA_Nothing,
	MIA_GotoNext, // goto next
	MIA_GotoPrev, // goto prev
	MIA_PrevItem,
	MIA_NextItem,
	MIA_JumpNaviItem,
	MIA_JumpAdjustItem,
	//MIA_Exit, // Exit
	MIA_IncValue, // increase value
	MIA_DecValue, // decrease value
	MIA_ExecFunc,
	//MIA_Auto,
	MIA_InvIncValue,
	MIA_InvDecValue,
	MIA_RedrawMenu,
	MIA_Source,
	MIA_ExecGotoNext,
	MIA_ExecAndPowerNext,
	MIA_Power, // power control
	MIA_Auto,
} MenuItemActionType;

typedef struct
{
	BYTE cConditions; // bitfield of key event condition flags
	MenuItemActionType PressKeyEvent; // key event generated by PRESS condition
	//MenuItemActionType HoldKeyEvent; // key event generated by HOLD or REPEAT condition
	//BYTE cHoldCount; // threshold for HOLD event
	//BYTE cRptCount; // threshold for REPEAT event
	BYTE InputType;
} KeyEventType;

typedef enum
{
	LANG_English,
	LANG_Nums,
} LangaugeType;

typedef enum
{
	DWI_Nothing,
	DWI_Icon,
	DWI_Text,
	DWI_FullText,
	DWI_CenterText,
	DWI_FullCenterText,
	DWI_None
} DrawMenuItemType;

typedef BYTE* ( *fpDisplayText ) ( void );
typedef BOOL ( *fpExecFunc ) ( void );
typedef BYTE ( *fpItemIndex ) ( void );
typedef BOOL ( *fpAdjustValue ) ( MenuItemActionType action );
typedef WORD ( *fpGetValue ) ( void );
typedef WORD ( *fpGetMaxValue ) ( void );
typedef WORD ( *fpSetMaxValue ) ( void );

#define mpbStay 0x01 // for stay in menu page
#define mpbInvisible 0x02 // menu page visible or not
#define mpbSizeofItem 0x04
#define mpbSetItemTop 0x08
#define mpbDrawFrame 0x10
#define mpbMoving 0x20

#define mibSelectable 0x01 // for menu item selectable
#define mibInvisible 0x02 // for menu item selectable
#define mibFactoryItem 0x08
#define mibDrawValue 0x10
#define mibConditionEnableItem 0x40
#define mibAnalogItem 0x80

#define dwiEnd 0x01
#define dwiHex 0x02
#define dwiValueSelectRadioItemColor 0x04
#define dwiSingleRadioItem 0x08
#define dwiLargeNum 0x10

#define mtbIndividualTimeOut 0x80

typedef struct
{
	WORD* Fonts;
	WORD FontCount;
} MenuFontType;

typedef struct
{
	fpAdjustValue AdjustFunction;
	fpExecFunc ExecFunction;
} MenuItemFuncType;

typedef struct
{
	BYTE Flags;
	BYTE ForeColor, BackColor;
	BYTE SelForeColor, SelBackColor;
	BYTE XPos, YPos;
	fpGetValue GetValue;
} DrawNumberType;

typedef struct
{
	BYTE Flags;
	BYTE ForeColor, BackColor;
	BYTE SelForeColor, SelBackColor;
	BYTE Length;
	BYTE XPos, YPos;
	fpGetValue GetValue;
} DrawGaugeType;


typedef struct
{
	BYTE Flags;
	BYTE ForeColor, BackColor;
	BYTE SelForeColor, SelBackColor;
	BYTE XPos, YPos;
	fpDisplayText DisplayText;
} RadioTextType;

typedef struct
{
	BYTE Flags;
	fpGetValue GetValue;
	RadioTextType* RadioText;
} DrawRadioGroupType;

typedef struct
{
	BYTE Flags;
	DrawNumberType* DrawNumber;
	DrawGaugeType* DrawGauge;
	DrawRadioGroupType* DrawRadioGroup;
} DrawValueType;

typedef struct
{
	BYTE XPos, YPos;
	BYTE ForeColor, BackColor;
	BYTE SelForeColor, SelBackColor;
	BYTE NextPage;
	DrawMenuItemType DrawItemMethod;
	fpDisplayText DisplayText;
	KeyEventType* KeyEvents;
	MenuItemFuncType KeyFunction;
	DrawValueType* DisplayValue;
	BYTE Flags;
} MenuItemType;

typedef struct
{
	BYTE XSize, YSize;
	BYTE PrevPage;
	MenuItemType* MenuItems;
	BYTE ItemCount;
	fpExecFunc ExecFunction;
	BYTE TimeOut;
	BYTE Flags;
} MenuPageType;


